{"version":3,"sources":["Components/SJTUnit/modules/SJT.js","Components/SJTUnit/modules/NoteInfoGenerator.js","Components/SJTUnit/modules/createSquaresNotes.js","Components/SJTUnit/SJTUnit.js","Components/Overlay/Overlay.js","Components/TempoChanger/TempoChanger.js","Components/VolumeChanger/VolumeChanger.js","Components/BottomBar/BottomBar.js","App.js","registerServiceWorker.js","index.js"],"names":["permute","arr","N","length","directions","indices","push","i","result","res","makeResult","join","maxIndex","moveTo","undefined","j","tmp","swap","all","generator","next","module","exports","NoteInfoGenerator","noteArray","iterator","arguments","generation","generationIndex","Object","classCallCheck","this","note","scaleSize","iteration","parseInt","noteInfo","getNoteInfo","increment","creatorFunction","initialIteration","noteLength","scaleRootNote","scaleKey","scaleOctave","elementName","blockColour","callback","addTween","availableRects","index","tween","Konva","Tween","node","opacity","easing","Easings","EaseOut","duration","onFinish","reverse","synth","Tone","PolySynth","toMaster","totalRects","scaleArray","degreeList","key","rootNote","octave","console","log","scale","scaleLength","Scale","notes","concat","Math","max","apply","toConsumableArray","newScale","numTimes","floor","String","map","generateScaleArray","synthVoice","arrayOfNotes","notesToPermute","incrementalArray","data","notePermutations","generateSynthVoice","initialScaleNoteNames","konvaWidth","document","getElementById","offsetWidth","konvaHeight","offsetHeight","stage","Stage","container","width","height","layer","Layer","Rect","x","y","fill","add","Loop","time","playNote","triggerAttackRelease","play","SJTUnit","props","_this","possibleConstructorReturn","getPrototypeOf","call","setDefaultLoopState","setState","loopState","rooteNote","noteArrayString","loopStop","loop","loopPlaying","stop","loopStart","start","clearLoop","loopCreated","createDefaultLoop","loopData","createSquaresNotes","createLoop","noteString","processedNotesZeroIndexed","split","filter","Number","isInteger","konvaIdName","eventHandler","e","eventId","target","id","eventValue","value","writeToState","stateKey","valueToWrite","prevState","objectSpread","defineProperty","state","scaleInfo","buttons","_this2","react_default","a","createElement","className","onClick","type","name","placeholder","onChange","pattern","size","defaultValue","valye","externalFunction","React","Component","componentClasses","Overlay","hide","href","TempoChange","setBpm","tempoValue","currentState","difference","abs","isFinite","Transport","bpm","rampTo","defaultTempo","orientation","tooltip","VolumeChanger","setVolume","volumeValue","parseFloat","minVolume","Master","mute","muted","volume","convertRange","r1","r2","defaultVolume","lib_default","min","BottomBar","title","App","addSJT","arrayOfIndexes","invertState","stateArray","removeFromArray","splice","addToArray","colours","Components_Overlay_Overlay","style","background","Components_SJTUnit_SJTUnit","TempoChanger_TempoChanger","Components_VolumeChanger_VolumeChanger","Components_BottomBar_BottomBar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a208d492.chunk.js","sourcesContent":["/*\n\nFrom https://github.com/nodash/steinhaus-johnson-trotter\n\n*/\n\nfunction permute(arr) {\n\n    var N = arr.length;\n    var directions = [];\n    var indices = [];\n\n    directions.push(0);\n    indices.push(0);\n    for (var i = 1; i < N; i += 1) {\n        directions.push(-1);\n        indices.push(i);\n    }\n\n    function swap(i, j) {\n        var tmp = indices[i];\n        indices[i] = indices[j];\n        indices[j] = tmp;\n\n        tmp = directions[i];\n        directions[i] = directions[j];\n        directions[j] = tmp;\n    }\n\n    function result() {\n        var res = [];\n        for (var i = 0; i < N; i += 1) {\n            res.push(arr[indices[i]]);\n        }\n        return res;\n    }\n\n    var makeResult = typeof arr !== 'string' ? result : function () {\n        return result().join('');\n    };\n\n    return function () {\n        var i, maxIndex, moveTo;\n        for (i = 0; i < N; i += 1) {\n            if (directions[i] !== 0) {\n                maxIndex = i;\n                break;\n            }\n        }\n        if (maxIndex === undefined) {\n            return undefined;\n        }\n        for (i = maxIndex + 1; i < N; i += 1) {\n            if (directions[i] !== 0 && indices[i] > indices[maxIndex]) {\n                maxIndex = i;\n            }\n        }\n        moveTo = maxIndex + directions[maxIndex];\n        swap(maxIndex, moveTo);\n        if (moveTo === 0 || moveTo === N - 1 || indices[moveTo + directions[moveTo]] > indices[moveTo]) {\n            directions[moveTo] = 0;\n        }\n        for (i = 0; i < N; i += 1) {\n            if (indices[i] > indices[moveTo]) {\n                if (i < moveTo) {\n                    directions[i] = 1;\n                } else {\n                    directions[i] = -1;\n                }\n            }\n        }\n        return makeResult();\n    };\n};\n\npermute.all = function (arr) {\n    var generator = permute(arr);\n    var next = arr;\n    var result = [];\n    while (next !== undefined) {\n        result.push(next);\n        next = generator();\n    }\n    return result;\n};\n\nmodule.exports = permute;\n","/*\n\nA class that handles iterating over array indexes of the Steinhaus-Johnson-Trotter algorithm\n\n*/\n\nexport default class NoteInfoGenerator {\n\n  /*\n  PROPERTIES:\n\n  noteArray = array of notes constructed using SJT.js\n  iterator = iterator for the number of notes traversed\n  generation = number of permutation to return\n  generationIndex = index within the permutation we are referencing\n  note = note we are referenceing (noteArray[generation][generationIndex])\n  scaleSize = number of entries in a scale, used to work out generation\n  maxIndex = maximum index of the array. At present this is calculated dumbly, just by mutiplying the length of the two levels of the array. TODO: This could be done by using a flattening function later\n\n  */\n  constructor(noteArray, iterator = 0, generation = 0, generationIndex = 0, scaleSize = 0) {\n    this.noteArray = noteArray;\n    this.iterator = iterator;\n    this.generation = generation;\n    this.generationIndex = generationIndex;\n    this.note = this.noteArray[this.generation][this.generationIndex];\n    this.scaleSize = noteArray[0].length;\n    this.maxIndex = this.noteArray.length * this.noteArray[0].length\n  }\n\n  //returns all relevant information as an object\n  getInfo() {\n    return {\n      iteration: this.iterator,\n      generation: this.generation,\n      generationIndex: this.generationIndex,\n      note: this.note,\n      scaleSize: this.scaleSize\n    }\n  }\n\n  //increments ONLY, does not return information, also checks to make sure the iteration isn't over the maximum. The maximum is only calculated once in the constructor so that it's not calculated multiple times to save on power\n  increment() {\n    this.iterator++;\n    if (this.iterator >= this.maxIndex) {\n      this.iterator = 0;\n    }\n  }\n\n  //returns an object of information about the current note, then moves onto the next generation\n  getNoteInfo() {\n\n    //get size of scale and use it to work out how many generations have elapsed\n    this.generation = parseInt(this.iterator/this.scaleSize, 10);\n    this.generationIndex = this.iterator%this.scaleSize;\n    this.note = this.noteArray[this.generation][this.generationIndex]\n\n    //return all of the relevant information to be used later on by the visuals side.\n    return {\n      iteration: this.iterator,\n      generation: this.generation,\n      generationIndex: this.generationIndex,\n      note: this.note\n    }\n  }\n\n  getInformation() {\n    return {\n      iteration: this.iterator\n    }\n  }\n\n  //return note values as an object AND increment the iterator.\n  playNote() {\n    const noteInfo = this.getNoteInfo();\n    this.increment()\n    return noteInfo\n  }\n}\n","\n//Class for generating notes\nimport NoteInfoGenerator from \"./NoteInfoGenerator.js\";\nimport Tone from 'tone';\nimport permute from './SJT.js';\nimport Konva from 'konva';\nimport {Scale} from 'tonal';\n\n//callback function added in order to pass information out of scope that allows animation\n//After the callback there are attributes which will determine the colour of block to animate\n/*\n\nnoteArray = Array of indices inputted at the start\ninitialIteration = Initial note number. Not sure if this is needed\nnoteLength = Length of the notes fed to createAttackRelease\ncallback = function used to pass data out of this component and be read by the SJTUnit component\nelementName = id of div to create konva canvas onto\nblockColour = colour of blocks to be drawn behind the SJTUnit informarion\nscaleRootNote = Root note of scale to be used in Tonal scale generation (where previously indices were used)\nscaleKey = Key of scale to be used in Tonal scale generation\nscaleOctabe = Octave of scale to be used in Tonal scale generation\n\n*/\nconst creatorFunction = (noteArray = [0,4,7], initialIteration = 0, noteLength = '4n', scaleRootNote = \"C\", scaleKey=\"minor\", scaleOctave=\"5\",elementName = \"konva-test\", blockColour = \"#FFFFFF\", callback) => {\n\n  //Function to turn a degree list, key, root note and octave into a sorted array of notes.\n  const generateScaleArray = (degreeList, key = \"minor\", rootNote = \"C\", octave = \"4\") => {\n    if (degreeList.length === 0 || degreeList === undefined) {\n      degreeList = [0, 4, 7]\n    }\n\n    console.log(degreeList)\n    //Holding values for a scale (empty array to allow .concat method) and a final value\n    let scale = [], indexedScale;\n    //Returns how many degrees are in the scale to see how many octaves need to be generated\n    const scaleLength = Scale.notes(`${rootNote}${octave} ${key}`).length;\n    //See which octave boundaries degrees fall into\n    const maxIndex = Math.max(...degreeList);\n    //If statement which either generates one octave or generates multiple octaves.\n    if (maxIndex < scaleLength) {\n      scale = Scale.notes(`${rootNote}${octave} ${key}`)\n    } else {\n      //Get the number of octaves to generate, this is +1 as it is zero-indexed\n      let numTimes = Math.floor(maxIndex/scaleLength)+1;\n      //holding value for generated scales to be concatenated onto the empty `scale` array\n      let newScale;\n      //Work out if more scales are needed, and generate them accordingly, appending them to the empty `scale` variable\n      for(let i=0; i<=numTimes; i++) {\n        newScale = Scale.notes(`${rootNote}${String(parseInt(octave, 10)+i)} ${key}`);\n        scale = scale.concat(newScale);\n      }\n    }\n\n    //mapping degreeList _against_ a scale to create a new\n    indexedScale = degreeList.map(index => scale[index]);\n\n    return(indexedScale)\n  }\n\n  //Function to permute available notes\n  const permuteNotes = (notesToPermute) => {\n    return permute.all(notesToPermute)\n  }\n\n  //This function generates a SEQUENTIAL ARRAY, and then performs STEINHAUS-JOHNSON-TROTTER on it.\n  const generateSynthVoice = (arrayOfNotes, initialIteration) => {\n    const incrementalArray = arrayOfNotes.map((data,i) => i)\n    const notePermutations = permuteNotes(incrementalArray);\n    const player = new NoteInfoGenerator(notePermutations, initialIteration);\n    return player\n  }\n\n  //a function   to add a tween to a square. This needed to be created in order to get availableRects correctly assigned.\n  //This could do with being refactored as it's quite messy.\n  const addTween = (availableRects, index) => {\n    availableRects[index].tween = new Konva.Tween({\n      node: availableRects[index],\n      opacity: 0.8,\n      easing: Konva.Easings.EaseOut,\n      duration: 0.1,\n      onFinish: function() {\n        availableRects[index].tween.reverse()\n      }\n    })\n  }\n\n  //the synth to be used\n  var synth = new Tone.PolySynth().toMaster();\n\n  //if there are no usable notes, insert the defaults.\n  if (noteArray.length === 0 || noteArray === [] || noteArray === undefined) {\n    noteArray = [0,4,7]\n  }\n  const totalRects = noteArray.length;\n\n  //This generates an array of note names. These will be referenced within the tonejs timing loop\n  const scaleArray = generateScaleArray(noteArray, scaleKey, scaleRootNote, scaleOctave)\n  //generate an array of synths to be used\n  let synthVoice = generateSynthVoice(scaleArray, initialIteration)\n  //add the initial scale by  note name to the SynthVoice object\n  synthVoice.initialScaleNoteNames = noteArray.map((data, i) => scaleArray[i])\n\n  //Generate Konva dimensions using JS\n  const konvaWidth = document.getElementById(elementName).offsetWidth;\n  const konvaHeight = document.getElementById(elementName).offsetHeight;\n\n  //Create stage\n  const stage = new Konva.Stage({\n    container: elementName,\n    width: konvaWidth,\n    height: konvaHeight\n  });\n\n  const layer = new Konva.Layer();\n\n  let availableRects = [];\n  //THIS IS MESSY - Needs to be abstracted out into a function.\n\n  for(let i=0; i<totalRects; i++){\n    availableRects.push(new Konva.Rect({\n      x: (konvaWidth/totalRects*i),\n      y: 0,\n      width: (konvaWidth/totalRects),\n      height: konvaHeight,\n      fill: blockColour,\n      opacity: 0.05}))\n    }\n\n    //A for loop to create rectangles and add tweening animations to them.\n    for (let i=0; i<totalRects; i++) {\n      layer.add(availableRects[i]);\n      addTween(availableRects, i)\n    }\n\n    //add the Konva layer\n    stage.add(layer);\n\n    //return the data to component state\n    callback(synthVoice);\n\n    //This is returned so that the loop can be referenced. It also triggers the rest of the loop which is in scope.\n    return (\n      new Tone.Loop(function(time){\n        synthVoice.playNote();\n        //uses the master SJT array to refer to notes by index against an array of note names generated earlier.\n        synth.triggerAttackRelease(scaleArray[synthVoice.note], noteLength);\n        availableRects[synthVoice.note].tween.play();\n        //console log synthVoice for debugging if needed\n        synthVoice.note = scaleArray[synthVoice.note];\n        callback(synthVoice)\n      }, noteLength)\n    )\n  }\n\n  export default creatorFunction\n","/*\n\nThis component returns a div that has:\n\n- A loop, determined by the props provided\n- A button, which stops and starts the loop\n- Some sets of text which display information about the loop.\n- A slider, which can be used to set the initial pitch\n- A text field, which takes a space delimited string of integers which will be turned into an array and be used as notes to go through the Steinhaus johnson trotter algorithm\n\nThis needs to broken out into components.\n\n\n*/\n\n\nimport React from 'react';\n//class to generate loop of notes\nimport createSquaresNotes from \"./modules/createSquaresNotes.js\";\n//Steinhaus Johnson Trotter permutation algorithm\nimport './modules/SJT.js';\n//stylesheet for buttons\nimport './SJTUnit_Styles.css';\nimport '../../sliderstyles.css';\n\n\nclass SJTUnit extends React.Component {\n\n  constructor(props) {\n    /*\n\n    Konva ID name is passed in as a prop, which is\n\n    */\n    super(props);\n    /*\n    properties of state:\n\n    loopCreated = has a loop been created? Used for conditional rendering of buttons\n\n    */\n    this.state = {\n      loopCreated: false,\n      //loopState is added in order to initialise values that will later be used to create a loop\n      loopState: {\n        noteArray: [0,4,7],\n        initialIteration: 0,\n        noteLength: \"4n\",\n        rooteNote: \"C\",\n        scaleKey: \"minor\",\n        octave: 4\n      },\n      //This will be added as a string then converted into noteArray on creation\n      noteArrayString: \"0 4 7\",\n      //Is the loop playing?\n      loopPlaying: false,\n      //placeholder for loop data fed out of createSquaresNotes callback function\n      loopData: {\n        generation: 0,\n        generationIndex: 0,\n        iterator: 0,\n        maxIndex: 600,\n        note: 0,\n        noteArray: [0,0,0],\n        scaleSize: 5\n      },\n      //updated scale information sent from createSquaresNotes\n      scaleInfo: [\"C\"],\n    }\n  }\n\n  setDefaultLoopState = () => {\n    this.setState({\n      loopState: {\n        initialIteration: 0,\n        noteLength: \"4n\",\n        rooteNote: \"C\",\n        scaleKey: \"minor\",\n        octave: 4\n      },\n      //This will be added as a string then converted into noteArray on creation\n      noteArrayString: \"0 4 7\"\n    })\n  }\n\n  loopStop = (loop) => {\n    this.setState({loopPlaying: false})\n    loop.stop(0)\n  }\n\n  loopStart = (loop) => {\n    loop.start(\"@1m\")\n    this.setState({loopPlaying: true})\n  }\n\n  clearLoop = () => {\n    //This will make the state remove the relevant buttons from the DOM.\n    this.setState({loopCreated: false});\n    this.setDefaultLoopState();\n  }\n\n  //for testing\n  createDefaultLoop = (loopData) => {\n    return(\n      createSquaresNotes()\n    )\n  }\n\n  //This is a function which takes an object containing properties of the SJT loop to be created. This is then created using createSquaresNotes, old version.\n  //TODO: See if this can interrupt processing and re-spawn the input field\n  createLoop = (loopData = {\n    initialIteration: 0,\n    noteLength: \"4n\",\n    rooteNote: \"C\",\n    scaleKey: \"minor\",\n    octave: 4\n  }, noteString = \"0 4 7\") => {\n    this.setState({loopCreated: true});\n\n    //this splits the array, then converts the whole array to integers\n    const newNoteString = noteString.split(\" \")\n    const intNoteString = newNoteString.map(x => parseInt(x, 10));\n    /*\n    Processes the notes:\n    - Rejects strings\n    - Rejects integers that willbe negative after zero indexing\n    - Rejects integers over 30\n    */\n    const processedNotes = intNoteString.filter((data, index) => {\n      let val;\n      if (Number.isInteger(data) && data >= 1 && data < 30 && index <= 9) {\n        val = true;\n      } else {\n        val = false;\n      }\n      return val;\n    })\n\n    //Take one away from processedNotes to zero-index it\n    const processedNotesZeroIndexed = processedNotes.map(data => data - 1)\n\n    return(\n      createSquaresNotes(\n        processedNotesZeroIndexed,\n        loopData.initialIteration,\n        loopData.noteLength,\n        loopData.rootNote,\n        loopData.scaleKey,\n        loopData.octave,\n        //element name\n        this.props.konvaIdName,\n        //blockColour\n        '#e0e0e0',\n        //callback function, to get createSquaresNotes to write to state, in this case with synthVoice\n        (data) => {\n          //an array is put out through the callback function. One will be the loop data and on\n          this.setState({loopData: data});\n        },\n      )\n    )\n  }\n\n  eventHandler = (e) => {\n    const eventId = e.target.id;\n    const eventValue = e.target.value;\n    //A holder for stateKey so that the writeToState function can be called at the end of the function rather than for each case\n    let stateKey;\n\n    const writeToState = (stateKey, valueToWrite) => {\n      this.setState(prevState => ({\n        loopState: {\n          ...prevState.loopState,\n          //writes state key and value to previous loopState value\n          [stateKey]: valueToWrite\n        }\n      }))\n    }\n\n    switch(eventId) {\n      case \"scaleKey\":\n        stateKey = \"scaleKey\";\n        writeToState(stateKey, eventValue)\n        break;\n      case \"scaleOctave\":\n        stateKey = \"octave\"\n        writeToState(stateKey, eventValue)\n        break;\n      case \"scaleRoot\":\n        stateKey = \"rootNote\"\n        writeToState(stateKey, eventValue)\n        break;\n      case \"noteLength\":\n        stateKey = \"noteLength\"\n        writeToState(stateKey, eventValue)\n        break;\n      case \"scaleIndices\":\n        this.setState({noteArrayString: eventValue});\n        break;\n      default:\n        return true;\n    }\n\n  }\n\n  render() {\n\n    let buttons ;\n    if (this.state.loopCreated) {\n\n      buttons = (\n        <div className=\"createdLoopLayout\">\n          <div className=\"createdLoopButtonContainer center-contents\">\n            {\n              !this.state.loopPlaying ?\n              <button\n                className=\"SJTUnitButton createdLoopButton center-contents\"\n                onClick={() => this.loopStart(this.loop)}>\n                Play Loop\n              </button> :\n              <button\n                className=\"SJTUnitButton createdLoopButton center-contents\"\n                onClick={() => this.loopStop(this.loop)}>\n                Stop Loop\n              </button>\n            }\n          </div>\n          <div className=\"createdLoopButtonContainer center-contents\">\n            <button className=\"SJTUnitButton createdLoopButton center-contents\" onClick={() => {\n              this.loopStop(this.loop);\n              this.clearLoop()\n            }}>Clear Loop</button>\n          </div>\n          <div className=\"loopInformation\">\n            {/* each piece of text is separated into a div to make the layout correct*/}\n            <div className=\"infoText\"><div>Note:</div> <div>{this.state.loopData.note}</div></div>\n            <div className=\"infoText\"><div>Scale:</div> <div>{String(this.state.loopData.initialScaleNoteNames)}</div></div>\n            <div className=\"infoText\"><div>Note Number:</div> <div>{this.state.loopData.iterator}</div></div>\n            <div className=\"infoText\"><div>Generation:</div> <div>{`${this.state.loopData.generation+1}/${this.state.loopData.noteArray.length}`}</div></div>\n            <div className=\"infoText\"><div>Total Notes:</div> <div>{this.state.loopData.maxIndex}</div></div>\n          </div>\n        </div>\n      )\n\n    } else {\n\n      buttons = (\n        <div className=\"loopCreationLayout\">\n          {/* The button is created using loopState as it is when the button is pressed */}\n          <div className=\"dataInputUnit center-contents\">\n            <label>\n              {`Indices: `}\n              <div>\n                <input type=\"text\" name=\"indices\" placeholder=\"Default: 1 3 8\" onChange={this.eventHandler} id=\"scaleIndices\" pattern=\"(\\d{1,2}\\s){1,6}\" size=\"10\"/>\n              </div>\n            </label>\n          </div>\n\n          <div className=\"scale-dropdown-menus\">\n\n            <div className=\"dropdown-layout center-contents\">\n              <label>\n                {`Root: `}\n                <div>\n                  <select defaultValue=\"C\" onChange={/*this.setRoot*/ this.eventHandler} id=\"scaleRoot\">\n                  <option value=\"A\">A</option>\n                  <option value=\"Bb\">Bb</option>\n                  <option value=\"B\">B</option>\n                  <option value=\"C\">C</option>\n                  <option value=\"C#\">C#</option>\n                  <option value=\"D\">D</option>\n                  <option value=\"Eb\">Eb</option>\n                  <option value=\"E\">E</option>\n                  <option value=\"F\">F</option>\n                  <option value=\"F#\">F#</option>\n                  <option value=\"G\">G</option>\n                  <option value=\"G#\">G#</option>\n                </select>\n              </div>\n            </label>\n          </div>\n\n          <div className=\"dropdown-layout center-contents\">\n            <label>\n              {`Octave: `}\n              <div>\n                <select defaultValue=\"4\" onChange={this.eventHandler} id=\"scaleOctave\">\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n                <option value=\"4\">4</option>\n                <option value=\"5\">5</option>\n                <option value=\"6\">6</option>\n              </select>\n            </div>\n          </label>\n        </div>\n\n        <div className=\"dropdown-layout center-contents\">\n          <label>\n            {`Key: `}\n            <select defaultValue=\"minor\" onChange={this.eventHandler} id=\"scaleKey\">\n            <option value=\"major\">Major</option>\n            <option value=\"minor\">Minor</option>\n            <option valye=\"dorian\">Dorian</option>\n            <option value=\"mixolydian\">Mixolydian</option>\n            <option value=\"chromatic\">Chromatic</option>\n          </select>\n        </label>\n      </div>\n\n\n      <div className=\"dropdown-layout center-contents\">\n        <label>\n          {`Duration:    `}\n          <div>\n            <select defaultValue=\"4n\" onChange={this.eventHandler} id=\"noteLength\">\n            <option value=\"2n\" >1/2</option>\n            <option value=\"4n\">1/4</option>\n            <option value=\"8n\">1/8</option>\n            <option value=\"16n\">1/16</option>\n          </select>\n        </div>\n      </label>\n    </div>\n  </div>\n\n  <div className=\"dataInputUnit center-contents flow-table\">\n    <button className=\"SJTUnitButton center-contents\" onClick={() => {this.loop = this.createLoop(this.state.loopState, this.state.noteArrayString)}}>Create Loop</button>\n    <button className=\"SJTUnitButton center-contents\" onClick={this.props.externalFunction}> Remove Loop </button>\n  </div>\n</div>\n)\n\n}\n\nreturn (\n  <div className=\"buttonHolder\" >\n    {/* This could be extracted out into a play/stop button. */}\n    {buttons}\n  </div>\n)\n}\n}\n\nexport default SJTUnit\n","import React from 'react'\nimport './Overlay.css'\n\n\nconst componentClasses = ['overlay-styling'];\n\nclass Overlay extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {hide: false}\n  }\n\n  //Setting up CSS transitions for the overlay, using the class show to push an opacity level to overlay-styling\n\n\n  render() {\n\n  if (this.state.hide) {componentClasses.push('hide')};\n\n  return (\n    <div className={componentClasses.join(' ')}>\n        <div className=\"overlayText\">\n       <h1>Steinhaus-Johnson-Trotter Web</h1>\n\n       <p>This is a four-channel change-ringing simulator, built using <a href=\"https://reactjs.org/\">Reactjs</a>, <a href=\"https://konvajs.github.io/\">Konva</a> <a href=\"https://tonejs.github.io/\">Tonejs</a> and the <a href=\"https://github.com/danigb/tonal\">Tonal</a> library.</p>\n\n       This is best viewed on a laptop/desktop computer\n\n       <h3>How to use</h3>\n\n       <ol>\n         <li>On one of the fields click 'Initialise Loop'</li>\n         <li>Enter the degrees of the scale you wish to use as a pattern (with 0 being the root note of the scale), separated by spaces (e.g. 0 4 7) - Up to ten values are permitted. This process requires exponentially more computation for each value, be aware of this when entering long sequences.</li>\n         <li>Choose a scale root, octave, key and note duration (optional)</li>\n         <li>Click 'Create Loop', which applies Steinhaus-Johnson-Trotter permutations to your sequence</li>\n         <li>Click 'Play Loop' to hear the playback of the permuted sequence, and see visualisation of that sequence </li>\n      </ol>\n\n\n      <ul>\n      <li>Loops can be removed with the 'Clear Loop' button</li>\n      <li>Tempo and Volume can be changed using the sliders below the loop fields</li>\n      <li>Any negative numbers, text, numbers over 30 and any more than 10 values will be silently rejected from input. This is to prevent errors, notes that are too high/low, and large permutation calculations crashing the browser</li>\n    </ul>\n\n       <h3>Known Issues</h3>\n\n       <ul>\n       <li>Tempo changes can cause playback of loops to stop working</li>\n       <li>Changing the dimensions of the browser will not change the dimensions of visuals</li>\n     </ul>\n\n\n     <h3>About the Steinhaus-Johnson-Trotter Algorithm</h3>\n\n       <p>The Steinhaus–Johnson–Trotter algorithm or Johnson–Trotter algorithm, also called plain changes, is an algorithm named after Hugo Steinhaus, Selmer M. Johnson and Hale F. Trotter that generates all of the permutations of n elements. Each permutation in the sequence that it generates differs from the previous permutation by swapping two adjacent elements of the sequence.</p>\n\n       <p>Outside of mathematics, the same method was known for much longer as a method for change ringing of church bells: it gives a procedure by which a set of bells can be rung through all possible permutations, changing the order of only two bells per change. These so-called \"plain changes\" were recorded as early as 1621 for four bells, and a 1677 book by Fabian Stedman lists the solutions for up to six bells.</p>\n\n       Information CC BY-SA from <a href=\"https://en.wikipedia.org/wiki/Steinhaus%E2%80%93Johnson%E2%80%93Trotter_algorithm\">Wikipedia</a>\n\n       <div className=\"bottom-alignment\">\n       <button className=\"closeButton\" onClick={() => {this.setState({hide: true})}}>Start</button>\n     </div>\n     </div>\n     </div>\n  )\n}\n}\n\nexport default Overlay\n","import React from 'react';\nimport Tone from 'tone';\nimport './TempoChanger.css'\n\nclass TempoChange extends React.Component {\n\n  constructor(props) {\n    super(props);\n    //playing defaults to true because loops are created independently of one another.\n    this.state = {\n      tempoValue: 60,\n      defaultTempo: 60\n    }\n  }\n\n  componentDidMount() {\n    //set default tempo and volume values\n    Tone.Transport.bpm.value = this.state.tempoValue\n    //set the default tempo\n    this.setState({tempoValue:this.state.defaultTempo})\n  }\n\n  setBpm = (e) => {\n    let tempoValue;\n    if (typeof(e) === 'object') {\n      //parse the target value object\n      tempoValue = parseInt(e.target.value, 10)\n    } else if (typeof(e) === 'number') {\n      //directly assign the target value object\n      tempoValue = parseInt(e, 10)\n    }\n    const currentState = this.state.tempoValue;\n    const difference = Math.abs(tempoValue - currentState);\n    //check if value is finite\n    if (isFinite(tempoValue)) {\n    //Check the differenc e in the values. If it's more than 2, it's a good idea to ramp it.\n    if(difference <= 2) {\n      //no ramp\n      Tone.Transport.bpm.value = tempoValue;\n      this.setState({tempoValue: tempoValue});\n    } else if (difference < 10) {\n      //ramp\n      this.setState({tempoValue: tempoValue});\n      Tone.Transport.bpm.rampTo(tempoValue,difference/50)\n    } else {\n      this.setState({tempoValue: tempoValue});\n      Tone.Transport.bpm.rampTo(tempoValue,1)\n    }\n  }\n  }\n\n  render() {\n  return (\n    <div className=\"tempoChanger\">\n      <span className=\"tempoChangerTitle\">Tempo:</span>\n      <select\n        value={this.state.tempoValue}\n        orientation=\"horizontal\"\n        onChange={value => this.setBpm(value)}\n        tooltip=\"false\"\n         >\n         <option value={50}>50</option>\n         <option value={60}>60</option>\n         <option value={75}>75</option>\n         <option value={100}>100</option>\n         <option value={110}>110</option>\n        </select>\n        </div>\n    )\n}\n}\n\nexport default TempoChange\n","import React from 'react'\nimport Slider from 'react-rangeslider'\nimport Tone from 'tone'\nimport './VolumeChanger.css'\n\n//TODO: set default voume within component\n\nclass VolumeChanger extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      volume: 80,\n      minVolume: -40,\n      defaultVolume: -3\n    }\n  }\n\n  componentDidMount() {\n    //set default tempo and volume values\n    Tone.Master.volume.value = this.state.defaultVolume\n    //set the default volume to the default volume state. \n    this.setState({volume:this.state.defaultVolume})\n  }\n\n  setVolume = (e) => {\n      let volumeValue\n      if (typeof(e) === 'object') {\n        //parse the target value object\n        volumeValue = parseFloat(e.target.value)\n      } else if (typeof(e) === 'number') {\n        //directly assign the target value object\n        volumeValue = parseFloat(e, 10)\n      }\n      if (isFinite(volumeValue)) {\n        if (parseInt(volumeValue, 10) === this.state.minVolume) {\n          Tone.Master.mute = true\n          this.setState({muted: true})\n        } else if (parseInt(volumeValue, 10) !== this.state.minVolume && this.state.muted === true) {\n          Tone.Master.mute = false;\n          this.setState({muted: false});\n        }\n      this.setState({volume: volumeValue})\n      //NOTE: The use of signal `.value` call is essential here.\n      //Documented here: https://github.com/Tonejs/Tone.js/wiki/Signals\n      Tone.Master.volume.rampTo(volumeValue,0.1)\n\n    }\n  }\n\n  //Function taken from https://stackoverflow.com/questions/14224535/scaling-between-two-number-ranges to scale volume value printouts to 0-100 to be more user-accessible for people who don't know about decibels\n  convertRange = ( value, r1, r2 ) => {\n    return ( value - r1[ 0 ] ) * ( r2[ 1 ] - r2[ 0 ] ) / ( r1[ 1 ] - r1[ 0 ] ) + r2[ 0 ];\n  }\n\n  render() {\n    return (\n      <div className=\"volumeSlider\">\n          <p className=\"volumeSliderTitle\">{`Volume: `}\n{parseInt(this.convertRange(this.state.volume,[this.state.minVolume,0],[0,100]), 10)} </p>\n          <Slider\n            orientation=\"horizontal\"\n            onChange={value => this.setVolume(value)}\n            value={this.state.volume}\n            min={-40}\n            max={0}\n            tooltip={false} />\n        </div>\n    )\n  }\n}\n\nexport default VolumeChanger\n","import React from 'react';\nimport './BottomBarStyling.css'\n\nconst BottomBar = () => {\n  return (\n    <div className=\"bottomBar-Container\">\n    <div className=\"bottom-bar\">\n      <a title=\"View on GitHub\" href=\"https://github.com/theseanco/SJT-Web-2\" className=\"fab fa-github\"><span>View on GitHub</span></a>\n      <a href=\"https://angel.co/sean-cotterill\" className=\"fab fa-angellist\"><span>My angellist</span></a>\n      <a href=\"https://www.linkedin.com/in/seancotterill/\" className=\"fab fa-linkedin\"><span>My Linkedin</span></a>\n      <a href=\"https://twitter.com/theseanco\" className=\"fab fa-twitter\"><span>My Twitter</span></a>\n    </div>\n    </div>\n  )\n}\n\nexport default BottomBar;\n","import React, { Component } from 'react';\nimport './App.css';\n//Styling imported, ported from old project\nimport './stylesheet.css';\n//buttons\nimport './buttons.css';\n//components\nimport SJTUnit from \"./Components/SJTUnit/SJTUnit\";\nimport Tone from 'tone';\n//import overlay that explains the app\nimport Overlay from \"./Components/Overlay/Overlay\";\n//import tempo changing checkbox\nimport TempoChanger from \"./Components/TempoChanger/TempoChanger\";\n//import volume slider\nimport VolumeChanger from \"./Components/VolumeChanger/VolumeChanger\";\n//bottom bar for socials\nimport BottomBar from \"./Components/BottomBar/BottomBar\";\n//Custom stylesheet for Slider - Makes the slider smaller to better sit underneath loop generators.\nimport './sliderstyles.css';\n\n\n/*\n\nTODO:\n\n- Input formatting: This can be done by using a regex.\n- The correct regex is: (\\d{1,2}\\s){1,6}\n- Change the colour of links once already clicked\n\nSCALES:\n- Make a 'normal' and 'advanced' mode dropdown.\n  - Normal has major/minor/chromatic, octave\n  - Advanced has a whole bunch more, octave, transposition.\n  - Add the Tizita scale (request from HB)\n\n- Currently all negative integers are rejected. These could be accepted.\n- createSquaresNotes and SJTUnit need rewriting, they're getting very messy\n- Mute doesn't work\nx Change of tempo can stop loops working for some reason.\n  - Some loops will inexplicably not work.\n  - THIS COULD BE SOLVED BY MAKING TEMPO CHANGES ONLY HAPPEN ON RELEASE\n*/\n\n//This works to stop the transport\nconst startPlaying = () => {\n  Tone.Transport.start(\"+0.1\");\n}\n\n/*\nA default tempo value.\n\nTODO: Perhaps this isn't the best way to do this, starting with a hardcoded value, but it works for now.\n*/\n//Some values that are used in tempo and bpm calculation\nconst defaultTempo = 60;\nconst defaultVolume = -3;\n\nclass App extends Component {\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      //Booleans control whether loops are activated or not\n      arrayOfIndexes: [false , false, false, false],\n      //inherits from global variable\n      tempoValue: defaultTempo,\n      //inherits from global variable\n      volume: defaultVolume,\n      //Four colours taken from color scheme site.\n      colours: [\"rgba(71, 151, 97, 0.5)\",\n      \"rgba(161, 110, 131, 0.5)\",\n      \"rgba(206, 188, 129, 0.5)\",\n      \"rgba(177, 159, 158, 0.5)\" ],\n      muted: false\n    }\n  }\n\n  //Function to add a SJT component. Not used\n  addSJT = () => {\n    this.setState((state, props) => {\n      return {arrayOfIndexes: state.arrayOfIndexes.push(true)}\n    })\n  }\n\n  //Function to invert a boolean of a particular index of the state array\n  invertState = (index) => {\n    let stateArray = this.state.arrayOfIndexes;\n    stateArray[index] = !stateArray[index];\n    this.setState({arrayOfIndexes: stateArray})\n  }\n\n  //Function to remove a particular index of a state array.\n  removeFromArray = (index) => {\n    let stateArray = this.state.arrayOfIndexes;\n    stateArray = stateArray.splice(index,1)\n    this.setState({arrayOfIndexes: stateArray})\n  }\n\n  //Function to add an index to the end of the state array.\n  addToArray = (index) => {\n    let stateArray = this.state.arrayOfIndexes;\n    stateArray = stateArray.push(true);\n    this.setState({arrayOfIndexes: stateArray})\n  }\n\n  componentDidMount() {\n    startPlaying();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        {/* Component rendering an infobox upon opening then page  */}\n          <Overlay />\n\n        {\n          this.state.arrayOfIndexes.map((data, i) => {\n            if (!data) {\n              return(\n                //This returns a div with a button asking whether you want to initialise a loop\n              <div className=\"div-styling center-contents\" key={i} style={{background: this.state.colours[i]}}>\n                <button className=\"initialiseButtonStyling initialiseButton center-contents\" onClick={() => this.invertState(i)}>Initialise Loop {i+1}</button>\n              </div>\n          )\n            } else {\n              return (\n                //This returns a div contaning an SJTUnit component, which is wrapped in a div which will be used to generate Konva squares. The ID of the konva div will then be passed into the SJTUnit, which will be passed into the creation argument of createSquaresNotes. This passing-down can probably be done better, but will be tackled during a refactor.\n                <div className=\"div-styling\" style={{background: this.state.colours[i]}} key={i}>\n\n                <div className=\"konva-container\" id={`konva-${i}`}>\n                </div>\n                  <div className=\"SJTUnit-container\" key={i} >\n                    <SJTUnit key={i} externalFunction={() => this.invertState(i)} konvaIdName={`konva-${i}`}/>\n                  </div>\n                </div>\n\n              )\n            }\n          })\n        }\n\n        {/* This could do with being extracted out */}\n        <div className=\"slidersDiv\" >\n        <TempoChanger />\n        <VolumeChanger />\n        </div>\n        <BottomBar />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}